// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: processor/data.proto

package processor

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountRequestMultiError, or nil if none found.
func (m *CreateAccountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := CreateAccountRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateAccountRequestMultiError(errors)
	}

	return nil
}

// CreateAccountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateAccountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountRequestMultiError) AllErrors() []error { return m }

// CreateAccountRequestValidationError is the validation error returned by
// CreateAccountRequest.Validate if the designated constraints aren't met.
type CreateAccountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountRequestValidationError) ErrorName() string {
	return "CreateAccountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountRequestValidationError{}

// Validate checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateAccountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateAccountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateAccountResponseMultiError, or nil if none found.
func (m *CreateAccountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateAccountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateAccountResponseMultiError(errors)
	}

	return nil
}

// CreateAccountResponseMultiError is an error wrapping multiple validation
// errors returned by CreateAccountResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateAccountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateAccountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateAccountResponseMultiError) AllErrors() []error { return m }

// CreateAccountResponseValidationError is the validation error returned by
// CreateAccountResponse.Validate if the designated constraints aren't met.
type CreateAccountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateAccountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateAccountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateAccountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateAccountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateAccountResponseValidationError) ErrorName() string {
	return "CreateAccountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateAccountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateAccountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateAccountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateAccountResponseValidationError{}

// Validate checks the field values on ResetRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetRequestMultiError, or
// nil if none found.
func (m *ResetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetRequestMultiError(errors)
	}

	return nil
}

// ResetRequestMultiError is an error wrapping multiple validation errors
// returned by ResetRequest.ValidateAll() if the designated constraints aren't met.
type ResetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetRequestMultiError) AllErrors() []error { return m }

// ResetRequestValidationError is the validation error returned by
// ResetRequest.Validate if the designated constraints aren't met.
type ResetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetRequestValidationError) ErrorName() string { return "ResetRequestValidationError" }

// Error satisfies the builtin error interface
func (e ResetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetRequestValidationError{}

// Validate checks the field values on ResetResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetResponseMultiError, or
// nil if none found.
func (m *ResetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return ResetResponseMultiError(errors)
	}

	return nil
}

// ResetResponseMultiError is an error wrapping multiple validation errors
// returned by ResetResponse.ValidateAll() if the designated constraints
// aren't met.
type ResetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetResponseMultiError) AllErrors() []error { return m }

// ResetResponseValidationError is the validation error returned by
// ResetResponse.Validate if the designated constraints aren't met.
type ResetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetResponseValidationError) ErrorName() string { return "ResetResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetResponseValidationError{}

// Validate checks the field values on CreditRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditRequestMultiError, or
// nil if none found.
func (m *CreditRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := CreditRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		err := CreditRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreditRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAction()) < 1 {
		err := CreditRequestValidationError{
			field:  "Action",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreditRequestMultiError(errors)
	}

	return nil
}

// CreditRequestMultiError is an error wrapping multiple validation errors
// returned by CreditRequest.ValidateAll() if the designated constraints
// aren't met.
type CreditRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditRequestMultiError) AllErrors() []error { return m }

// CreditRequestValidationError is the validation error returned by
// CreditRequest.Validate if the designated constraints aren't met.
type CreditRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditRequestValidationError) ErrorName() string { return "CreditRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreditRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditRequestValidationError{}

// Validate checks the field values on CreditResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreditResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreditResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreditResponseMultiError,
// or nil if none found.
func (m *CreditResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreditResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Balance

	if len(errors) > 0 {
		return CreditResponseMultiError(errors)
	}

	return nil
}

// CreditResponseMultiError is an error wrapping multiple validation errors
// returned by CreditResponse.ValidateAll() if the designated constraints
// aren't met.
type CreditResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreditResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreditResponseMultiError) AllErrors() []error { return m }

// CreditResponseValidationError is the validation error returned by
// CreditResponse.Validate if the designated constraints aren't met.
type CreditResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreditResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreditResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreditResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreditResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreditResponseValidationError) ErrorName() string { return "CreditResponseValidationError" }

// Error satisfies the builtin error interface
func (e CreditResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreditResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreditResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreditResponseValidationError{}

// Validate checks the field values on DebitRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DebitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DebitRequestMultiError, or
// nil if none found.
func (m *DebitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := DebitRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		err := DebitRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := DebitRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAction()) < 1 {
		err := DebitRequestValidationError{
			field:  "Action",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DebitRequestMultiError(errors)
	}

	return nil
}

// DebitRequestMultiError is an error wrapping multiple validation errors
// returned by DebitRequest.ValidateAll() if the designated constraints aren't met.
type DebitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitRequestMultiError) AllErrors() []error { return m }

// DebitRequestValidationError is the validation error returned by
// DebitRequest.Validate if the designated constraints aren't met.
type DebitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitRequestValidationError) ErrorName() string { return "DebitRequestValidationError" }

// Error satisfies the builtin error interface
func (e DebitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitRequestValidationError{}

// Validate checks the field values on DebitResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DebitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DebitResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DebitResponseMultiError, or
// nil if none found.
func (m *DebitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DebitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Balance

	if len(errors) > 0 {
		return DebitResponseMultiError(errors)
	}

	return nil
}

// DebitResponseMultiError is an error wrapping multiple validation errors
// returned by DebitResponse.ValidateAll() if the designated constraints
// aren't met.
type DebitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DebitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DebitResponseMultiError) AllErrors() []error { return m }

// DebitResponseValidationError is the validation error returned by
// DebitResponse.Validate if the designated constraints aren't met.
type DebitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DebitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DebitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DebitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DebitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DebitResponseValidationError) ErrorName() string { return "DebitResponseValidationError" }

// Error satisfies the builtin error interface
func (e DebitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDebitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DebitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DebitResponseValidationError{}

// Validate checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceRequestMultiError, or nil if none found.
func (m *GetUserBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := GetUserBalanceRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserBalanceRequestMultiError(errors)
	}

	return nil
}

// GetUserBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceRequestMultiError) AllErrors() []error { return m }

// GetUserBalanceRequestValidationError is the validation error returned by
// GetUserBalanceRequest.Validate if the designated constraints aren't met.
type GetUserBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceRequestValidationError) ErrorName() string {
	return "GetUserBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceRequestValidationError{}

// Validate checks the field values on GetUserBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceResponseMultiError, or nil if none found.
func (m *GetUserBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Balance

	if len(errors) > 0 {
		return GetUserBalanceResponseMultiError(errors)
	}

	return nil
}

// GetUserBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceResponseMultiError) AllErrors() []error { return m }

// GetUserBalanceResponseValidationError is the validation error returned by
// GetUserBalanceResponse.Validate if the designated constraints aren't met.
type GetUserBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceResponseValidationError) ErrorName() string {
	return "GetUserBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceResponseValidationError{}

// Validate checks the field values on ListUserTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserTransactionsRequestMultiError, or nil if none found.
func (m *ListUserTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUuid()) < 1 {
		err := ListUserTransactionsRequestValidationError{
			field:  "Uuid",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserTransactionsRequestMultiError(errors)
	}

	return nil
}

// ListUserTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserTransactionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserTransactionsRequestMultiError) AllErrors() []error { return m }

// ListUserTransactionsRequestValidationError is the validation error returned
// by ListUserTransactionsRequest.Validate if the designated constraints
// aren't met.
type ListUserTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserTransactionsRequestValidationError) ErrorName() string {
	return "ListUserTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserTransactionsRequestValidationError{}

// Validate checks the field values on ListUserTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserTransactionsResponseMultiError, or nil if none found.
func (m *ListUserTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserTransactionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserTransactionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserTransactionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserTransactionsResponseMultiError(errors)
	}

	return nil
}

// ListUserTransactionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserTransactionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserTransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserTransactionsResponseMultiError) AllErrors() []error { return m }

// ListUserTransactionsResponseValidationError is the validation error returned
// by ListUserTransactionsResponse.Validate if the designated constraints
// aren't met.
type ListUserTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserTransactionsResponseValidationError) ErrorName() string {
	return "ListUserTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserTransactionsResponseValidationError{}

// Validate checks the field values on ListUserTransactionsResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUserTransactionsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserTransactionsResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListUserTransactionsResponse_DataMultiError, or nil if none found.
func (m *ListUserTransactionsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserTransactionsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TransactionId

	// no validation rules for Amount

	// no validation rules for Action

	if len(errors) > 0 {
		return ListUserTransactionsResponse_DataMultiError(errors)
	}

	return nil
}

// ListUserTransactionsResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// ListUserTransactionsResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type ListUserTransactionsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserTransactionsResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserTransactionsResponse_DataMultiError) AllErrors() []error { return m }

// ListUserTransactionsResponse_DataValidationError is the validation error
// returned by ListUserTransactionsResponse_Data.Validate if the designated
// constraints aren't met.
type ListUserTransactionsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserTransactionsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserTransactionsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserTransactionsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserTransactionsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserTransactionsResponse_DataValidationError) ErrorName() string {
	return "ListUserTransactionsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserTransactionsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserTransactionsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserTransactionsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserTransactionsResponse_DataValidationError{}
