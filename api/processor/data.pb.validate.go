// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: processor/data.proto

package processor

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTransactionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransactionRequestMultiError, or nil if none found.
func (m *CreateTransactionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateTransactionRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreateTransactionRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Type

	if len(errors) > 0 {
		return CreateTransactionRequestMultiError(errors)
	}

	return nil
}

// CreateTransactionRequestMultiError is an error wrapping multiple validation
// errors returned by CreateTransactionRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateTransactionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionRequestMultiError) AllErrors() []error { return m }

// CreateTransactionRequestValidationError is the validation error returned by
// CreateTransactionRequest.Validate if the designated constraints aren't met.
type CreateTransactionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionRequestValidationError) ErrorName() string {
	return "CreateTransactionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionRequestValidationError{}

// Validate checks the field values on CreateTransactionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTransactionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTransactionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTransactionResponseMultiError, or nil if none found.
func (m *CreateTransactionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTransactionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	if len(errors) > 0 {
		return CreateTransactionResponseMultiError(errors)
	}

	return nil
}

// CreateTransactionResponseMultiError is an error wrapping multiple validation
// errors returned by CreateTransactionResponse.ValidateAll() if the
// designated constraints aren't met.
type CreateTransactionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTransactionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTransactionResponseMultiError) AllErrors() []error { return m }

// CreateTransactionResponseValidationError is the validation error returned by
// CreateTransactionResponse.Validate if the designated constraints aren't met.
type CreateTransactionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTransactionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTransactionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTransactionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTransactionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTransactionResponseValidationError) ErrorName() string {
	return "CreateTransactionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTransactionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTransactionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTransactionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTransactionResponseValidationError{}

// Validate checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceRequestMultiError, or nil if none found.
func (m *GetUserBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := GetUserBalanceRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserBalanceRequestMultiError(errors)
	}

	return nil
}

// GetUserBalanceRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserBalanceRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceRequestMultiError) AllErrors() []error { return m }

// GetUserBalanceRequestValidationError is the validation error returned by
// GetUserBalanceRequest.Validate if the designated constraints aren't met.
type GetUserBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceRequestValidationError) ErrorName() string {
	return "GetUserBalanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceRequestValidationError{}

// Validate checks the field values on GetUserBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserBalanceResponseMultiError, or nil if none found.
func (m *GetUserBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	// no validation rules for Balance

	if len(errors) > 0 {
		return GetUserBalanceResponseMultiError(errors)
	}

	return nil
}

// GetUserBalanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserBalanceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserBalanceResponseMultiError) AllErrors() []error { return m }

// GetUserBalanceResponseValidationError is the validation error returned by
// GetUserBalanceResponse.Validate if the designated constraints aren't met.
type GetUserBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserBalanceResponseValidationError) ErrorName() string {
	return "GetUserBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserBalanceResponseValidationError{}

// Validate checks the field values on ListUserTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserTransactionsRequestMultiError, or nil if none found.
func (m *ListUserTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListUserTransactionsRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListUserTransactionsRequestMultiError(errors)
	}

	return nil
}

// ListUserTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by ListUserTransactionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListUserTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserTransactionsRequestMultiError) AllErrors() []error { return m }

// ListUserTransactionsRequestValidationError is the validation error returned
// by ListUserTransactionsRequest.Validate if the designated constraints
// aren't met.
type ListUserTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserTransactionsRequestValidationError) ErrorName() string {
	return "ListUserTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserTransactionsRequestValidationError{}

// Validate checks the field values on ListUserTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListUserTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListUserTransactionsResponseMultiError, or nil if none found.
func (m *ListUserTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Message

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListUserTransactionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListUserTransactionsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserTransactionsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListUserTransactionsResponseMultiError(errors)
	}

	return nil
}

// ListUserTransactionsResponseMultiError is an error wrapping multiple
// validation errors returned by ListUserTransactionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListUserTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserTransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserTransactionsResponseMultiError) AllErrors() []error { return m }

// ListUserTransactionsResponseValidationError is the validation error returned
// by ListUserTransactionsResponse.Validate if the designated constraints
// aren't met.
type ListUserTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserTransactionsResponseValidationError) ErrorName() string {
	return "ListUserTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserTransactionsResponseValidationError{}

// Validate checks the field values on ListUserTransactionsResponse_Data with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListUserTransactionsResponse_Data) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListUserTransactionsResponse_Data
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListUserTransactionsResponse_DataMultiError, or nil if none found.
func (m *ListUserTransactionsResponse_Data) ValidateAll() error {
	return m.validate(true)
}

func (m *ListUserTransactionsResponse_Data) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Amount

	// no validation rules for Type

	if len(errors) > 0 {
		return ListUserTransactionsResponse_DataMultiError(errors)
	}

	return nil
}

// ListUserTransactionsResponse_DataMultiError is an error wrapping multiple
// validation errors returned by
// ListUserTransactionsResponse_Data.ValidateAll() if the designated
// constraints aren't met.
type ListUserTransactionsResponse_DataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListUserTransactionsResponse_DataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListUserTransactionsResponse_DataMultiError) AllErrors() []error { return m }

// ListUserTransactionsResponse_DataValidationError is the validation error
// returned by ListUserTransactionsResponse_Data.Validate if the designated
// constraints aren't met.
type ListUserTransactionsResponse_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserTransactionsResponse_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserTransactionsResponse_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserTransactionsResponse_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserTransactionsResponse_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserTransactionsResponse_DataValidationError) ErrorName() string {
	return "ListUserTransactionsResponse_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserTransactionsResponse_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserTransactionsResponse_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserTransactionsResponse_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserTransactionsResponse_DataValidationError{}
