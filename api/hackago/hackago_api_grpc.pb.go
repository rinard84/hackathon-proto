// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: hackago/hackago_api.proto

package hackago

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	HackaGoService_Betting_FullMethodName       = "/backend.hackago.api.HackaGoService/Betting"
	HackaGoService_Credit_FullMethodName        = "/backend.hackago.api.HackaGoService/Credit"
	HackaGoService_Debit_FullMethodName         = "/backend.hackago.api.HackaGoService/Debit"
	HackaGoService_CreateAccount_FullMethodName = "/backend.hackago.api.HackaGoService/CreateAccount"
	HackaGoService_History_FullMethodName       = "/backend.hackago.api.HackaGoService/History"
	HackaGoService_GetBalance_FullMethodName    = "/backend.hackago.api.HackaGoService/GetBalance"
	HackaGoService_GetAccount_FullMethodName    = "/backend.hackago.api.HackaGoService/GetAccount"
)

// HackaGoServiceClient is the client API for HackaGoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HackaGoServiceClient interface {
	Betting(ctx context.Context, in *BettingRequest, opts ...grpc.CallOption) (*BettingResponse, error)
	Credit(ctx context.Context, in *BettingRequest, opts ...grpc.CallOption) (*BettingResponse, error)
	Debit(ctx context.Context, in *BettingRequest, opts ...grpc.CallOption) (*BettingResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error)
}

type hackaGoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHackaGoServiceClient(cc grpc.ClientConnInterface) HackaGoServiceClient {
	return &hackaGoServiceClient{cc}
}

func (c *hackaGoServiceClient) Betting(ctx context.Context, in *BettingRequest, opts ...grpc.CallOption) (*BettingResponse, error) {
	out := new(BettingResponse)
	err := c.cc.Invoke(ctx, HackaGoService_Betting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hackaGoServiceClient) Credit(ctx context.Context, in *BettingRequest, opts ...grpc.CallOption) (*BettingResponse, error) {
	out := new(BettingResponse)
	err := c.cc.Invoke(ctx, HackaGoService_Credit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hackaGoServiceClient) Debit(ctx context.Context, in *BettingRequest, opts ...grpc.CallOption) (*BettingResponse, error) {
	out := new(BettingResponse)
	err := c.cc.Invoke(ctx, HackaGoService_Debit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hackaGoServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, HackaGoService_CreateAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hackaGoServiceClient) History(ctx context.Context, in *HistoryRequest, opts ...grpc.CallOption) (*HistoryResponse, error) {
	out := new(HistoryResponse)
	err := c.cc.Invoke(ctx, HackaGoService_History_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hackaGoServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, HackaGoService_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hackaGoServiceClient) GetAccount(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountResponse, error) {
	out := new(GetAccountResponse)
	err := c.cc.Invoke(ctx, HackaGoService_GetAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HackaGoServiceServer is the server API for HackaGoService service.
// All implementations must embed UnimplementedHackaGoServiceServer
// for forward compatibility
type HackaGoServiceServer interface {
	Betting(context.Context, *BettingRequest) (*BettingResponse, error)
	Credit(context.Context, *BettingRequest) (*BettingResponse, error)
	Debit(context.Context, *BettingRequest) (*BettingResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	History(context.Context, *HistoryRequest) (*HistoryResponse, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error)
	mustEmbedUnimplementedHackaGoServiceServer()
}

// UnimplementedHackaGoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHackaGoServiceServer struct {
}

func (UnimplementedHackaGoServiceServer) Betting(context.Context, *BettingRequest) (*BettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Betting not implemented")
}
func (UnimplementedHackaGoServiceServer) Credit(context.Context, *BettingRequest) (*BettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credit not implemented")
}
func (UnimplementedHackaGoServiceServer) Debit(context.Context, *BettingRequest) (*BettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debit not implemented")
}
func (UnimplementedHackaGoServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedHackaGoServiceServer) History(context.Context, *HistoryRequest) (*HistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method History not implemented")
}
func (UnimplementedHackaGoServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedHackaGoServiceServer) GetAccount(context.Context, *GetAccountRequest) (*GetAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedHackaGoServiceServer) mustEmbedUnimplementedHackaGoServiceServer() {}

// UnsafeHackaGoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HackaGoServiceServer will
// result in compilation errors.
type UnsafeHackaGoServiceServer interface {
	mustEmbedUnimplementedHackaGoServiceServer()
}

func RegisterHackaGoServiceServer(s grpc.ServiceRegistrar, srv HackaGoServiceServer) {
	s.RegisterService(&HackaGoService_ServiceDesc, srv)
}

func _HackaGoService_Betting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HackaGoServiceServer).Betting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HackaGoService_Betting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HackaGoServiceServer).Betting(ctx, req.(*BettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HackaGoService_Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HackaGoServiceServer).Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HackaGoService_Credit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HackaGoServiceServer).Credit(ctx, req.(*BettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HackaGoService_Debit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HackaGoServiceServer).Debit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HackaGoService_Debit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HackaGoServiceServer).Debit(ctx, req.(*BettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HackaGoService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HackaGoServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HackaGoService_CreateAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HackaGoServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HackaGoService_History_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HackaGoServiceServer).History(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HackaGoService_History_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HackaGoServiceServer).History(ctx, req.(*HistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HackaGoService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HackaGoServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HackaGoService_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HackaGoServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HackaGoService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HackaGoServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HackaGoService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HackaGoServiceServer).GetAccount(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HackaGoService_ServiceDesc is the grpc.ServiceDesc for HackaGoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HackaGoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "backend.hackago.api.HackaGoService",
	HandlerType: (*HackaGoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Betting",
			Handler:    _HackaGoService_Betting_Handler,
		},
		{
			MethodName: "Credit",
			Handler:    _HackaGoService_Credit_Handler,
		},
		{
			MethodName: "Debit",
			Handler:    _HackaGoService_Debit_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _HackaGoService_CreateAccount_Handler,
		},
		{
			MethodName: "History",
			Handler:    _HackaGoService_History_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _HackaGoService_GetBalance_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _HackaGoService_GetAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hackago/hackago_api.proto",
}
